// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/juanpabloavilan/meli-interview-exercise/product-history-service/internal/app/core/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductHistoryRepo is an autogenerated mock type for the ProductHistoryRepo type
type ProductHistoryRepo struct {
	mock.Mock
}

type ProductHistoryRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductHistoryRepo) EXPECT() *ProductHistoryRepo_Expecter {
	return &ProductHistoryRepo_Expecter{mock: &_m.Mock}
}

// AddMany provides a mock function with given fields: ctx, items
func (_m *ProductHistoryRepo) AddMany(ctx context.Context, items []models.ProducPriceHistory) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for AddMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.ProducPriceHistory) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductHistoryRepo_AddMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMany'
type ProductHistoryRepo_AddMany_Call struct {
	*mock.Call
}

// AddMany is a helper method to define mock.On call
//   - ctx context.Context
//   - items []models.ProducPriceHistory
func (_e *ProductHistoryRepo_Expecter) AddMany(ctx interface{}, items interface{}) *ProductHistoryRepo_AddMany_Call {
	return &ProductHistoryRepo_AddMany_Call{Call: _e.mock.On("AddMany", ctx, items)}
}

func (_c *ProductHistoryRepo_AddMany_Call) Run(run func(ctx context.Context, items []models.ProducPriceHistory)) *ProductHistoryRepo_AddMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]models.ProducPriceHistory))
	})
	return _c
}

func (_c *ProductHistoryRepo_AddMany_Call) Return(_a0 error) *ProductHistoryRepo_AddMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductHistoryRepo_AddMany_Call) RunAndReturn(run func(context.Context, []models.ProducPriceHistory) error) *ProductHistoryRepo_AddMany_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductHistoryRepo creates a new instance of ProductHistoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductHistoryRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductHistoryRepo {
	mock := &ProductHistoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
